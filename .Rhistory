View(avgStepsEachDay)
geom_histogram(data=avgStepsEachDay)
library(ggplot2)
geom_histogram(data=avgStepsEachDay)
qplot(average_steps, data=avgStepsEachDay, geom = "histogram")
qplot(date, data=avgStepsEachDay, geom = "histogram")
colnames(avgStepsEachDay) <- c("dates", "average_steps")
qplot(dates, data=avgStepsEachDay, geom = "histogram")
qplot(steps, data=avgStepsEachDay, geom = "histogram")
qplot(average_steps, data=avgStepsEachDay, geom = "histogram")
source('~/.active-rstudio-document')
inData[inData$steps > 0,]
count(inData[inData$steps > 0,])
count(inData[inData$steps == 0,])
library(doBy)
inDataNoZeros <- inData[inData$steps > 0,]
summaryBy(steps ~ date, data = inDataNoZeros, FUN = list(mean, median, sum))
dataSummary <- summaryBy(steps ~ date, data = inDataNoZeros, FUN = list(mean, median, sum))
qplot(steps.average, data=dataSummary, geom = "histogram")
qplot('steps.average', data=dataSummary, geom = "histogram")
qplot(steps.mean, data=dataSummary, geom = "histogram")
View(inDataNoZeros)
dataSummary <- summaryBy(steps ~ date, data = inData, FUN = list(mean, median, sum))
View(dataSummary)
View(dataSummary)
dataSummary[c(1,4),]
dataSummary[,c(1,4)]
dataSummary[,-4]
write.table(dataSummary, row.names = F)
write.table(dataSummary[,-4], row.names = F)
write.table(dataSummary[,-4], row.names = F, sep = "\t")
print.data.frame(dataSummary[,-4], row.names = F)
View(inData)
ggplot(data=inData, aes(x=interval, y=summaryBy(steps ~ date, data = inData, FUN = list(mean)))) + geom_line()
summaryBy(steps ~ date, data = inData, FUN = list(mean))
summaryBy(steps ~ date, data = inData, FUN = list(mean))$steps.mean
ggplot(data=inData, aes(x=interval, y=summaryBy(steps ~ date, data = inData, FUN = list(mean))$steps.mean )) + geom_line()
View(dataSummary)
merge(inData[,-1], dataSummary[,c(1,2)])
t1 <- merge(inData[,-1], dataSummary[,c(1,2)])
View(t1)
View(inData)
ggplot(data=t1, aes(x=interval, y=steps.mean)) + geom_line()
ggplot(data=t1, aes(x=interval, y=steps.mean, group=1)) + geom_line()
?plot
plot(t1$interval, t1$steps.mean, type="l")
t2 <- summaryBy(steps.mean ~ interval, data = t1[,c(2,3)], FUN=mean)
View(t2)
t2 <- summaryBy(steps ~ interval, data = inData[,c(1,3)], FUN=mean)
View(t2)
plot(t2$interval, t2$steps.mean, type="l")
ggplot(data=t2, aes(x=interval, y=steps.mean)) + geom_line()
View(t2)
max(t2$steps.mean)
t2[t2$steps.mean == max(t2$steps.mean),]
inData2 <- inDataOrig
View(inData2)
inData2[,c(1,2)]
head(inData2[,c(1,2)])
inData2[is.na(inData2$steps),c(1,2)]
View(dataSummary)
merge(inData2[is.na(inData2$steps),c(1,2)], dataSummary[,c(2,1)])
merge(dataSummary[,c(2,1)], inData2[is.na(inData2$steps),c(1,2)])
inData2[is.na(inData2$steps),c(1,2)]
dataSummary[,c(2,1)]
merge(dataSummary[,c(2,1)], inData2[is.na(inData2$steps),c(1,2)], by = "date", all.y = T)
merge(dataSummary[,c(2,1)], inData2[is.na(inData2$steps),c(1,2)], by = "date", all.x = T)
dst1 <- dataSummary[,c(2,1)]
colnames(dst1) <- c("steps", "date")
head(dst1)
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = "date", all.y = T)
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = "date", all.x = T)
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = "date", all = T)
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = "date")
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = NULL)
merge(dst1, inData2[is.na(inData2$steps),c(1,2)], by = "date")
merge(inData2[is.na(inData2$steps),c(1,2)], dst1, by = "date")
View(dst1)
merge(inData2[is.na(inData2$steps),c(1,2)], dst1, by = "date")
head(dst1)
head(inData2[is.na(inData2$steps),c(1,2)])
merge(inData2[is.na(inData2$steps),c(1,2)], dst1, by = "date")
merge(inData2[is.na(inData2$steps),c(1,2)], dst1)
merge(inData2[is.na(inData2$steps),c(1,2)]$steps, dst1, by="date")
merge(inData2[is.na(inData2$steps),c(1,2)]$date, dst1, by="date")
inData2[is.na(inData2$steps),c(1,2)]$date
merge(inData2[is.na(inData2$steps),c(2)], dst1, by="date")
inData2[is.na(inData2$steps),c(2)]
inData2[is.na(inData2$steps),2]
inData2[is.na(inData2$steps),c(1,2)]
inData2[is.na(inData2$steps), dates]
inData2[is.na(inData2$steps), date]
inData2[is.na(inData2$steps), "date"]
as.data.frame(inData2[is.na(inData2$steps), date])
class(inData2[is.na(inData2$steps), "date"])
class(list(inData2[is.na(inData2$steps), "date"]))
as.data.frame(list(inData2[is.na(inData2$steps), "date"]))
t1 <- as.data.frame(list(inData2[is.na(inData2$steps), "date"]))
head(t1)
dim(t1)
colnames(t1) <- C("date")
merge(inData2[is.na(inData2$steps),c(2)], dst1, by="date")
merge(inData2[is.na(inData2$steps),c(2,1)], dst1, by="date")
merge(inData2[is.na(inData2$steps),c(2,1)], dst1, by="steps")
merge(inData2[is.na(inData2$steps),c(2,1)], dst1, by="date")
t1 <- inData2[is.na(inData2$steps),c(2,1)]
merge(t1, dst1, by="date")
head(t1)
head(dst1)
t1 <- inData2[is.na(inData2$steps),c(1,2)]
head(t1)
merge(t1, dst1, by="date")
merge(t1, dst1, by="date", all.x = T)
merge(t1, dst1, by="date", all.y = T)
merge(t1, dst1, by=NULL)
merge(t1, dst1, by="steps", all.y = T)
merge(t1, dst1, by="steps", all.x = T)
t1[,1]
t1[,1] <- 0
t1[,1]
merge(t1, dst1, by="steps")
merge(t1, dst1, by="date")
merge(t1, dst1, by="date", all.y=T)
merge(t1, dst1, by="date", all.x=T)
head(merge(t1, dst1, by="date", all.x=T))
class(t1$date)
class(dst1$date)
class(dst1$date[1])
class(t1$date[1])
t1$date[1]
t1$date[2]
t1$date[[1]]
t1[,1] <- NA
View(t1)
sqldf("select * from t1 inner join dst1 t1.date = dst1.date;")
sqldf("select * from t1 inner join dst1 t1.date = dst1.date")
sqldf("select * from t1 inner join dst1 on t1.date = dst1.date;")
sqldf("select steps from dst1 inner join t1 on dst1.date = t1.date;")
sqldf("select steps from dst1")
sqldf("select steps from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select steps, t1.date from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select dst1.steps, t1.date from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select dst1.steps from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select t1.steps from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select * from dst1 inner join t1 on dst1.date = t1.date")
sqldf("select dst1.steps from dst1 right join t1 on dst1.date = t1.date")
sqldf("select dst1.steps from dst1 left join t1 on dst1.date = t1.date")
sqldf("select * from t1 left join dst1 on t1.date = dst1.date;")
inData2[is.na(inData2$steps),]
t1 <- inData2
for (x in head(t1[is.na(t1$steps),])) {
print(x)
}
for (x in head(t1[is.na(t1$steps),])) {
print(x)
readline()
}
?apply
myf <- function(x){
print(x)
readline()
}
h1 <- head(t1[is.na(t1$steps),]))
apply(h1, 1, myf)
h1 <- head(t1[is.na(t1$steps),]))
myf <- function(x){
print(x)
readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
myf <- function(x){
print(x$steps)
readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
myf <- function(x){
print(x["steps"])
readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
myf <- function(x){
x["steps"] = 5
#readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
myf <- function(x){
print(x["steps"])
readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
View(h1)
myf <- function(x){
x[["steps"]] = 5
#readline()
}
h1 <- head(t1[is.na(t1$steps),])
apply(h1, 1, myf)
View(h1)
View(t1)
View(dst1)
merge(t1, dst1, by=date, all.x=T)
merge(t1, dst1, by="date", all.x=T)
merge(t1, dst1, by="date")
View(dst1)
View(t1)
h1 <- merge(t1, dst1, by="date")
View(h1)
h1 <- merge(t1, dst1, by="date", all.y = T)
View(h1)
View(inDataOrig)
rm(h1)
rm(t1)
rm(t2)
rm(x)
rm(myf)
rm(dst1)
View(dataSummary)
inData2 <- inDataOrig
t1 <- merge(inData2[is.na(inData2$steps),], dataSummary[,c(1,2)], by="date", all.y = T)
View(t1)
View(inData2)
inData2 <- inDataOrig
t1 <- merge(inData2[is.na(inData2$steps),], dataSummary[,c(2,1)], by="date", all.y = T)
t2 <- inData2[is.na(inData2$steps),]
View(t2)
inData2 <- inDataOrig
t1 <- merge(inData2[is.na(inData2$steps),], dataSummary[,c(2,1)], by="date")
inData2 <- inDataOrig
t1 <- merge(inData2[is.na(inData2$steps),], dataSummary[,c(2,1)], by="date", all.x = T)
View(t1)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t2 <- dataSummary[,c(2,1)]
t1 <- merge(t1, t2, by="date", all.y = T)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t2 <- dataSummary[,c(2,1)]
t3 <- merge(t1, t2, by="date", all.y = T)
View(t1)
View(t2)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t2 <- dataSummary[,c(2,1)]
t3 <- merge(t1, t2, by="date")
t3 <- merge(t2, t1, by="date")
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t2 <- dataSummary[,c(2,1)]
t3 <- merge(t2, t1, by="date")
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t2 <- dataSummary[,c(2,1)]
t3 <- merge(t2, t1, by="date", all.x = T)
inData2 <- inDataOrig
#t1 <- inData2[is.na(inData2$steps),]
t1 <- inData2
t2 <- dataSummary[,c(2,1)]
t3 <- merge(t1, t2, by="date")
View(t3)
View(t1)
intveralAvg <- summaryBy(steps ~ interval, data = inData[,c(1,3)], FUN=mean)
View(intveralAvg)
View(dataSummary)
View(inData2)
t3 <- merge(t1, intervalAvg, by="interval")
t3 <- merge(t1, intveralAvg, by="interval")
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),c(1,3)]
t3 <- merge(t1, intveralAvg, by="interval")
View(t1)
View(t3)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t3 <- merge(t1, intveralAvg, by="interval")
View(t3)
sort(t3$date)
?sort
order(t3, date)
order(t3, t3$date)
sort(t3, f=date)
arrange(t3, date, interval)
t3 <- arrange(t3, date, interval)
View(t3)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t3 <- merge(t1, intveralAvg, by="interval", all.y = T)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t3 <- merge(t1, intveralAvg, by="interval", all.x = T)
inData2 <- inDataOrig
t1 <- inData2[is.na(inData2$steps),]
t3 <- merge(t1, intveralAvg, by="interval")
View(t3)
t3 <- arrange(t3, date, interval)
View(t3)
t3 <- t3[,c(4,3,1)]
View(t3)
inData2[is.na(inData2$steps), "steps"]
inData2[is.na(inData2$steps), "steps"] <- t3$steps.mean
View(inData2)
rm(t1)
rm(t2)
rm(t3)
rm(inData2)
inDataFull <- inDataOrig
t1 <- merge(inDataFull[is.na(inDataFull$steps),], intveralAvg, by="interval")
t1 <- arrange(t1, date, interval) # Rearranging by date then interval
t1 <- t1[,c(4,3,1)] # Rearranding columns and removing one non-needed column
inDataFull[is.na(inDataFull$steps), "steps"] <- t1$steps.mean
inDataFull <- inDataOrig
t1 <- merge(inDataFull[is.na(inDataFull$steps),], intveralAvg, by="interval")
t1 <- arrange(t1, date, interval) # Rearranging by date then interval
t1 <- t1[,c(4,3,1)] # Rearranding columns and removing one non-needed column
inDataFull[is.na(inDataFull$steps), "steps"] <- t1$steps.mean
rm(t1)
View(inDataFull)
dataFullSummary <- summaryBy(steps ~ date, data = inDataFull, FUN = list(mean, median, sum))
View(dataFullSummary)
install.packages("lubridate")
library(lubridate)
inDataFull$date[1]
weekdays(inDataFull$date[1])
weekdays(as.Date(inDataFull$date[1]))
?weekdays
library(chron)
is.weekend(as.Date(inDataFull$date[1]))
class(as.Date("2015-06-06"))
class(as.Date("2015-06-06")) == "Date"
dayOrEnd <- function(x){
if (is.weekend(as.Date(x))){
return("weekend")
}else{
return("weekday")
}
}
t1 <- apply(inDataFull$date, MARGIN = 1, FUN = dayOrEnd)
dayOrEnd <- function(x){
if (is.weekend(as.Date(x))){
return("weekend")
}else{
return("weekday")
}
}
t1 <- apply(inDataFull["date"], MARGIN = 1, FUN = dayOrEnd)
dayOrEnd <- function(x){
if (is.weekend(as.Date(x))){
return("weekend")
}else{
return("weekday")
}
}
inDataFull$weekDayOrEnd <- apply(inDataFull["date"], MARGIN = 1, FUN = dayOrEnd)
View(inDataFull)
rm(t1)
cls
ggplot(data=inDataFull, aes(x=date, y=steps)) + geom_line()
ggplot(data=inDataFull, aes(x=interval, y=steps)) + geom_line()
ggplot(data=inDataFull[inDataFull$weekDayOrEnd == "weekend",], aes(x=interval, y=steps)) + geom_line()
class(inDataFull$weekDayOrEnd)
class(inDataFull$weekDayOrEnd[1])
inDataFull$weekDayOrEnd <- as.factor(inDataFull$weekDayOrEnd)
class(inDataFull$weekDayOrEnd[1])
ggplot(data=inDataFull[inDataFull$weekDayOrEnd == "weekend",], aes(x=interval, y=steps)) + geom_line()
summary(inDataFull$weekDayOrEnd)
levels(inDataFull$weekDayOrEnd)
weekdayAvg <- summaryBy(steps ~ interval, data = inDataFull[inDataFull$weekDayOrEnd == "weekday",], FUN=mean)
weekendAvg <- summaryBy(steps ~ interval, data = inDataFull[inDataFull$weekDayOrEnd == "weekend",], FUN=mean)
View(weekdayAvg)
ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line()
ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line()
plot(weekdayAvg, type = "l")
plot(weekendAvg, type = "l")
plot(weekdayAvg, type = "l")
plot(weekendAvg, type = "l")
?plot
plot(weekendAvg, type = "l", xlim=c(0,200))
plot(weekendAvg, type = "l", ylim=c(0,200))
plot(weekdayAvg, type = "l")
plot(weekendAvg, type = "l", ylim=c(0,250))
plot(weekdayAvg, type = "l", ylim=c(0,250))
ggplot(data=weekendAvg, aes(x=interval, y=steps)) + geom_line() + ggtitle("Weekend")
ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend")
ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday")
ggplot(data=weekendAvg, aes(x=interval, y=steps.mean), ylim=c(0,250)) + geom_line() + ggtitle("Weekend")
ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean), ylim=c(0,250)) + geom_line() + ggtitle("Weekday")
ggplot(data=weekendAvg, aes(x=interval, y=steps.mean) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
/
)
ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
multiplot(weekendPlot, weekdayPlot, cols=1)
library(ggplot2)
multiplot(weekendPlot, weekdayPlot, cols=1)
package_version(ggplot2)
package_version("ggplot2")
?package_version
packageVersion(ggplot2)
packageVersion("ggplot2")
grid.arrange(weekendPlot, weekdayPlot, cols=1)
library(grid)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
weekendPlot <- ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
install.packages("multiplot")
do.call(grid.arrange, c(list(weekendPlot,weekdayPlot), list(ncols=1)))
do.call(grid.arrange, c(list(weekendPlot), list(weekdayPlot), list(ncols=1)))
qplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
qplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend")
qplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + ggtitle("Weekend")
qplot(data=weekendAvg, aes(x=interval, y=steps.mean))
qplot(weekendAvg)
qplot(weekendAvg, aes(x=interval, y=steps.mean))
qplot(weekendAvg$interval, weekendAvg$steps.mean)
qplot(weekendAvg$interval, weekendAvg$steps.mean) + geom_line()
qplot(weekendAvg$interval, weekendAvg$steps.mean) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
qplot(weekdayAvg$interval, weekdayAvg$steps.mean) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
qplot(weekdayAvg["interval"], weekdayAvg["steps.mean"]) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
qplot(weekdayAvg[["interval"]], weekdayAvg[["steps.mean"]]) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
qplot(weekdayAvg$interval, weekdayAvg$steps.mean) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean) #+ geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean) #+ geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
update.packages("plyr")
install.packages("plyr")
detach("plyr", unload=T)
detach("package:plyr", unload=T)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot[1], weekdayPlot[1], cols=1)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot[[1]], weekdayPlot[[1]], cols=1)
weekdayPlot
weekdayPlot[[1]]
localenv <- environment()
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot[[1]], weekdayPlot[[1]], cols=1)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot, weekdayPlot, cols=1)
grid.arrange(weekendPlot[1], weekdayPlot[1], cols=1)
weekendPlot <- qplot(weekendAvg$interval, weekendAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- qplot(weekdayAvg$interval, weekdayAvg$steps.mean, environment = localenv) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot[1], weekdayPlot[1], cols=1)
weekendPlot <- ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot, weekdayPlot, cols=2)
weekendPlot <- ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
grid.arrange(weekendPlot[1], weekdayPlot[1], cols=2)
install.packages("cowplot")
library(cowplot)
weekendPlot <- ggplot(data=weekendAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekend") + ylim(0, 250)
weekdayPlot <- ggplot(data=weekdayAvg, aes(x=interval, y=steps.mean)) + geom_line() + ggtitle("Weekday") + ylim(0, 250)
plot_grid(weekendPlot, weekdayPlot, ncol=1, nrow = 2)
overlayPlot <- ggplot(data=inDataFull, aes(interval)) +
geom_line(aes(y=inDataFull[inDataFull$weekDayOrEnd=="weekend",]$steps), colour="weekEND")+
geom_line(aes(y=inDataFull[inDataFull$weekDayOrEnd=="weekday",]$steps), colour="weekDAY")
overlayPlot
overlayPlot <- ggplot(data=inDataFull, aes(interval,steps, group=weekDayOrEnd))
overlayPlot
ggplot(data=inDataFull, aes(interval,steps, group=weekDayOrEnd))
ggplot(data=inDataFull, aes(x=interval,y=steps, group=weekDayOrEnd))
ggplot(data=inDataFull, aes(x=interval,y=steps))
ggplot(data=inDataFull, aes(x=interval,y=steps)) + geom_line()
ggplot(data=inDataFull, aes(x=interval,y=steps, group=weekDayOrEnd)) + geom_line()
ggplot(data=inDataFull, aes(x=interval,y=steps, factor(weekDayOrEnd))) + geom_line()
ggplot(data=inDataFull, aes(x=interval,y=steps, group=weekDayOrEnd), colour = factor(weekDayOrEnd)) + geom_line()
overlayPlot <- ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + scale_fill_hue(name="Legend")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + scale_fill_hue(name="Legend") + theme(legend.position=c(.7, .4))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + guide_legend(title = "Legend")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + theme(legend.position = "bottom")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + theme(legend.position = "right")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + theme(legend.position = "right")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green") + ggtitle("Overlay Plot of Weekend and Weekday") + scale_colour_manual(values=c("red","green"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green")  + scale_colour_manual(values=c("red","green")) + ggtitle("Overlay Plot of Weekend and Weekday") + scale_colour_manual(values=c("red","green"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="red") + geom_line(data = weekendAvg, colour="green")  + scale_colour_manual(values=c("red","green")) + ggtitle("Overlay Plot of Weekend and Weekday")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="weekday") + geom_line(data = weekendAvg, colour="weekend") + scale_colour_manual("", breaks = c("weekday", "weekend"), values = c("red", "green"))
overlayPlot <- ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="weekday") + geom_line(data = weekendAvg, colour="weekend") + scale_colour_manual("", breaks = c("weekday", "weekend"), values = c("red", "green"))
overlayPlot
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="green", title="weekday") + geom_line(data = weekendAvg, colour="red", title="weekend")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(colour="green", title="weekday") + geom_line(data = weekendAvg, colour="red", title="weekend") + theme(legend.title=element_blank())
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + theme(legend.title=element_blank()) + geom_line(colour="green", title="weekday") + geom_line(data = weekendAvg, colour="red", title="weekend")
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + theme(legend.title=element_blank()) + geom_line(colour="green", title="weekday") + geom_line(data = weekendAvg, colour="red", title="weekend") + + theme(legend.title=element_blank())
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + theme(legend.title=element_blank()) + geom_line(colour="green", title="weekday") + geom_line(data = weekendAvg, colour="red", title="weekend") + theme(legend.title=element_blank())
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(aes(colour="green")) + geom_line(data = weekendAvg, aes(colour="red"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(aes(colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(aes(title="Weekend or Weekday",colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(aes(legend.title=element_blank(),colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend"))
ggplot(data=weekdayAvg, aes(interval,steps.mean)) + geom_line(aes(colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend")) + theme(legend.title=element_blank())
ggplot(data=weekdayAvg, aes(interval,steps.mean, title="Overlay Plot of Average Weekday & Weekend Steps")) + geom_line(aes(colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend")) + theme(legend.title=element_blank())
plot_grid(weekendPlot, weekdayPlot, overlayPlot, ncol=1, rel_heights = 5)
overlayPlot <- ggplot(data=weekdayAvg, aes(interval,steps.mean, title="Overlay Plot of Average Weekday & Weekend Steps")) + geom_line(aes(colour="Weekday")) + geom_line(data = weekendAvg, aes(colour="Weekend")) + theme(legend.title=element_blank())
plot_grid(weekendPlot, weekdayPlot, overlayPlot, ncol=1, rel_heights = 5)
plot_grid(weekendPlot, weekdayPlot, overlayPlot, ncol=1, rel_heights = 10)
plot_grid(weekendPlot, weekdayPlot, overlayPlot, ncol=1, rel_heights = 40)
